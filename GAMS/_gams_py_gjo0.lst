GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *Michael Craig 16 Apr 2020
   2   
   3  *$offlisting
   4  *$offsymxref offsymlist
   5  Options
   6           optcr = 1E-2
   7           reslim = 100000
   8           threads = 0
   9           solvelink = 5
  10           limcol = 0
  11           limrow = 0
  12           solprint = silent
  13           ;
  14   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CESharedFeatures.gms
  16  *Michael Craig 16 Apr 2020
  17   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\EDAndUCSharedFeatures.gms
  19  *Michael Craig 14 May 2020
  20   
  22   
  23  Sets
  24  *Existing generators
  25           egu                             existing generators
  26                   renewegu(egu)                                  existing wind and solar generators
  27                   windegu(renewegu)                              existing wind generators
  28                   solaregu(renewegu)                             existing solar generators
  29                   hydroegu(renewegu)
  30                   genegu(egu)                  egus that are not dacs or storage
  31                   dacsegu(egu)                 direct air capture units
  32                   notdacsegu(egu)              egus that are not dac units
  33           storageegu(egu)                 storage units
  34           h                               hours
  35                   z                                                              zones
  36                   l                                                              lines
  37           ;
  38   
  39  Parameters
  40  *SIZE PARAMETERS [GW]
  41           pCapac(egu)                     hourly capacity of existing generators accounting for curtailments [GW]
  42  *HEAT RATES [MMBtu/GWh]
  43           pHr(egu)                        heat rate of existing generators [MMBtu per GWh]
  44  *COST PARAMETERS
  45           pOpcost(egu)                    total operational cost [thousandUSD per GWh] = VOM + FuelCost*HR + EmsCost*EmsRate*HR
  46  *RAMP RATES [GW/hr]
  47           pRamprate(egu)                  up and down ramp rate of EGU [GW per hr]
  48  *EMISSIONS RATES [short ton/MMBtu]
  49           pCO2emrate(egu)                 CO2 emissions rate of existing generators [short ton per MMBtu]
  50  *EMISSIONS COST [$/short ton]
  51           pCO2cost
  52  *RENEWABLE GENERATION CAPS
  53           pMaxgenwind(z,h)                  max hourly generation for existing wind [GWh]
  54           pMaxgensolar(z,h)                 max hourly generation for existing solar [GWh]
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


  55  *STORAGE PARAMETERS
  56                   pStoinenergymarket              whether storage can provide energy (1) or not (0)
  57           pEfficiency(storageegu)         round trip storage efficiency
  58           pCapaccharge(storageegu)        max charging capacity (GW)
  59           pMaxsoc(storageegu)             max stored energy (GWh)
  60           pMinsoc(storageegu)             min stored energy (GWh)
  61  *ZONAL PROPERTIES
  62                  pGenzone(egu)                                   zone in which egu is located
  63                  pDemand(z,h)                      hourly electricity demand [GWh]
  64                  pH2Demand(z)
  65                  pLinesource(l)                                  zone that is the source of line l
  66                  pLinesink(l)                                    zone that is the sink of line l
  67                  pLinecapac(l)                                   MW capacity of line l
  68                  pH2ExLineCapac(l)
  69                  pTransEff
  70  *HOURLY ELECTRICITY DEMAND [GWh]
  71           pDemandShifter                  demand shifter (percentage)
  72           pDemandShiftingBlock
  73  *COST OF NONSERVED ENERGY [THOUSAND$/GWH]
  74           pCnse                                   cost of non-served energy [thousandUSD per GWh]
  75  *HOURLY RESERVE REQUIREMENTS [GW]
  76           pRegupreserves(z,h)         regulation up reserve [GW]
  77           pFlexreserves(z,h)
  78           pContreserves(z,h)
  79  *RESERVE PROVISION PARAMETERS
  80  *Convert ramp rate to reserve timeframe
  81           pRampratetoregreservescalar     converts ramp rate timeframe to reg reserve timeframe
  82           pRampratetoflexreservescalar    converts ramp rate timeframe to spin reserve timeframe
  83           pRampratetocontreservescalar    converts ramp rate timeframe to spin reserve timeframe
  84  *Set whether generator can provide reserve
  85           pRegeligible(egu)               existing generators eligible to provide reg reserves [0] or not [1]
  86           pFlexeligible(egu)
  87           pConteligible(egu)
  88  *Set max reserve offer based on eligibility and ramp rate
  89           pMaxflexoffer(egu)
  90           pMaxcontoffer(egu)
  91           pMaxregupoffer(egu)
  92           ;
  93   
GDXIN   C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gdb0.gdx
--- LOAD  egu = 1:egu
--- LOAD  renewegu = 2:renewegu
--- LOAD  windegu = 3:windegu
--- LOAD  solaregu = 4:solaregu
--- LOAD  hydroegu = 5:hydroegu
--- LOAD  h = 7:h
--- LOAD  z = 8:z
--- LOAD  l = 9:l
--- LOAD  dacsegu = 6:dacsegu
--- LOAD  storageegu = 38:storageegu
--- LOAD  pCapac = 25:pCapac
--- LOAD  pHr = 21:pHr
--- LOAD  pOpcost = 24:pOpcost
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


--- LOAD  pRamprate = 23:pRamprate
--- LOAD  pCO2emrate = 22:pCO2emrate
--- LOAD  pCO2cost = 20:pCO2Cost
--- LOAD  pMaxgensolar = 27:pMaxgensolar
--- LOAD  pMaxgenwind = 28:pMaxgenwind
--- LOAD  pStoinenergymarket = 43:pStoinenergymarket
--- LOAD  pEfficiency = 39:pEfficiency
--- LOAD  pMaxsoc = 41:pMaxsoc
--- LOAD  pMinsoc = 42:pMinsoc
--- LOAD  pCapaccharge = 40:pCapaccharge
--- LOAD  pGenzone = 26:pGenzone
--- LOAD  pDemand = 10:pDemand
--- LOAD  pH2Demand = 13:pH2Demand
--- LOAD  pLinesource = 35:pLinesource
--- LOAD  pLinesink = 36:pLinesink
--- LOAD  pLinecapac = 33:pLinecapac
--- LOAD  pH2ExLineCapac = 37:pH2ExLinecapac
--- LOAD  pTransEff = 34:pTransEff
--- LOAD  pDemandShifter = 11:pDemandShifter
--- LOAD  pDemandShiftingBlock = 12:pDemandShiftingBlock
--- LOAD  pCnse = 32:pCnse
--- LOAD  pRegupreserves = 17:pRegupreserves
--- LOAD  pFlexreserves = 18:pFlexreserves
--- LOAD  pContreserves = 19:pContreserves
--- LOAD  pRampratetoregreservescalar = 14:pRampratetoregreservescalar
--- LOAD  pRampratetoflexreservescalar = 15:pRampratetoflexreservescalar
--- LOAD  pRampratetocontreservescalar = 16:pRampratetocontreservescalar
--- LOAD  pFlexeligible = 30:pFlexeligible
--- LOAD  pConteligible = 31:pConteligible
--- LOAD  pRegeligible = 29:pRegeligible
 105   
 106  *DEFINE EGU SUBSETS
 107  notdacsegu(egu) = not dacsegu(egu);
 108  genegu(egu) = not (dacsegu(egu) + storageegu(egu));
 109   
 110  *CALCULATE MAX RESERVE OFFERS
 111  pMaxflexoffer(egu) = pFlexeligible(egu)*pRamprate(egu)*pRampratetoflexreservescalar;
 112  pMaxcontoffer(egu) = pConteligible(egu)*pRamprate(egu)*pRampratetocontreservescalar;
 113  pMaxregupoffer(egu) = pRegeligible(egu)*pRamprate(egu)*pRampratetoregreservescalar;
 114   
 115  Variables
 116  *COSTS
 117                   vVarcost(egu,h)
 118  *DEMAND RESPONSE
 119                   vShiftedDemand(z,h)
 120                   ;
 121   
 122  Positive variables
 123  *GENERATION AND RESERVES
 124                   vGen(egu,h)                     hourly electricity generation by existing plant [GWh]
 125           vRegup(egu,h)                   hourly reg up reserves provided by existing plant [GWh]
 126           vFlex(egu,h)
 127           vCont(egu,h)
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 128  *STORAGE VARIABLES
 129           vStateofcharge(storageegu,h)            "energy stored in storage unit at end of hour h (GWh)"
 130           vCharge(storageegu,h)                   "charged energy by storage unit in hour h (GWh)"
 131  *EMISSIONS
 132           vCO2ems(egu,h)
 133  *TRANSMISSION LINE FLOWS
 134                  vLineflow(l,h)
 135           ;
 136   
 137  Equations
 138  *Op costs
 139           calcvarcosts(egu,h)
 140  *Generation and reserve constraints
 141           limitallresup(egu,h)            limit total generation plus up reserves of existing plants to capacity
 142  *Renewable generation
 143           limitWindGen(z,h)
 144                   limitSolarGen(z,h)
 145  *Line flows
 146  *               limitLineFlow(l,h)
 147  *Carbon limits
 148           calcco2ems(egu,h)                    sum annual co2 emissions
 149           ;
 150   
 151  ******************VAR COSTS*****************
 152  calcvarcosts(egu,h)..  vVarcost(egu,h) =e= vGen(egu,h)*pOpcost(egu) + vCO2ems(egu,h)*pCO2cost;
 153  ********************************************
 154   
 155  ******************GENERATION AND RESERVE CONSTRAINTS******************
 156  *Limit spining and regulation reserves each to market participation
 157  vFlex.fx(egu,h)$[pMaxflexoffer(egu)=0] = 0;
 158  vCont.fx(egu,h)$[pMaxcontoffer(egu)=0] = 0;
 159  vRegup.fx(egu,h)$[pMaxregupoffer(egu)=0] = 0;
 160   
 161  *Limit spinning and regulation up reserves together to spare capacity
 162  limitallresup(genegu,h) .. vGen(genegu,h) + vFlex(genegu,h) + vCont(genegu,h) + vRegup(genegu,h) =l= pCapac(genegu);
 163   
 164  *Set lower bound to zero for generation by storage and generating techs.
 165  vGen.lo(notdacsegu,h) = 0;
 166  *Set upper bound to zero for DACS. DACS max capacity is negative and has negative vGen values.
 167  vGen.up(dacsegu,h) = 0;
 168  ********************************************************************
 169   
 170  ******************STORAGE PARAMETERS*******************
 171  *LIMIT GENERATION AND RESERVES
 172  *Bound generation to capacity and ability to participate in energy market
 173  vGen.up(storageegu,h) = pStoinenergymarket * pCapac(storageegu);
 174   
 175  *CHARGE CONSTRAINTS
 176  *Place upper bound on charging
 177  vCharge.up(storageegu,h) = pCapaccharge(storageegu);
 178   
 179  *STATE OF CHARGE BOUNDS
 180  vStateofcharge.lo(storageegu,h) = pMinsoc(storageegu);
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 181  vStateofcharge.up(storageegu,h) = pMaxsoc(storageegu);
 182  *******************************************************
 183   
 184  ******************RENEWABLE GENERATION*****************
 185  limitWindGen(z,h)..  pMaxgenwind(z,h) =g= sum(windegu$[pGenzone(windegu)=ORD(z)],vGen(windegu,h));
 186  limitSolarGen(z,h).. pMaxgensolar(z,h) =g= sum(solaregu$[pGenzone(solaregu)=ORD(z)],vGen(solaregu,h));
 187  *******************************************************
 188   
 189  ******************TRANSMISSION LINE FLOWS*****************
 190  *limitLineFlow(l,h).. pLinecapac(l) =g= vLineflow(l,h);
 191  **********************************************************
 192   
 193  ******************CO2 EMISSIONS CONSTRAINT******************
 194  calcco2ems(egu,h)..   vCO2ems(egu,h) =e= vGen(egu,h)*pHr(egu)*pCO2emrate(egu);
 195  ************************************************************
 196   
 197  Sets
 198  *EXISTING GENERATORS
 199           nonrenewegu(egu)                existing nonrenewable generators
 200                  ststorageegu(storageegu)
 201                  ltstorageegu(storageegu)
 202  *CANDIDATE TECHNOLOGIES FOR CONSTRUCTION
 203           tech                            candidate technologies for new construction
 204  *Generators
 205           gentechs(tech)                  generating techs specifically not DACS or storage
 206           thermaltech(tech)               thermal plant types for new construction
 207                  CCStech(thermaltech)
 208                  nucleartech(thermaltech)
 209                  CCtech(thermaltech)
 210           renewtech(tech)                 renewable plant types for new construction
 211                  windtech(renewtech)      transInvestments
 212                  solartech(renewtech)
 213  *Storage
 214           storagetech(tech)               storage plant types for new construction
 215           nonstoragetech(tech)            non storage techs
 216                  ststoragetech(storagetech)
 217                  ltstoragetech(storagetech)
 218  *CO2 removal
 219           dacstech(tech)
 220           notdacstech(tech)
 221  *CANDIDATE TRANSMISSION LINES FOR CONSTRUCTION
 222  *               ltech
 223  *HOURS
 224           peakH(h)                        hour with peak net demand
 225           nonInitH(h)                   hours that are not initial horus of a block
 226           ;
 227   
 228  Alias (h,hh);
 229  Alias (l,ll);
 230   
 231  Parameters
 232  *MAX NEW UNITS TO BE BUILT
 233                   pNMaxWind
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 234                   pNMaxSolar
 235                   pNMaxNuclear
 236                   pNMaxCC
 237                   pNMaxCCS(CCStech)
 238                   pNMaxDACS(dacstech)
 239                   pPMaxSto(storagetech)
 240                   pEMaxSto(storagetech)
 241                   pPERatio(ststoragetech)
 242  *SIZE PARAMETERS [GW]
 243           pCapactech(tech)                nameplate capacity of new builds for cost calculations [GW]
 244  *HEAT RATES [MMBtu/GWh]
 245           pHrtech(tech)                   heat rate of new builds [MMBtu per GWh]
 246  *COST PARAMETERS
 247           pOpcosttech(tech)               total operational cost [thousandUSD per GWh] = VOM + FuelCost*HR + EmsCost*EmsRate*HR
 248           pFom(tech)                      fixed O&M cost [thousand$ per GW per yr]
 249           pOcc(tech)                      overnight capital cost [thousandUSD per GW]
 250                   pPowOcc(storagetech)                   occ for power capcity for lt storage
 251                   pEneOcc(storagetech)                   occ for energy capacity for lt storage
 252  *                pCnse                                                  cost of nonserved energy [thousandUSD per GW]
 253  *RAMP RATES [GW/hr]
 254           pRampratetech(tech)             up and down ramp rate of EGU assumed to be the same up & down [GW per hr]
 255  *STORAGE PARAMETERS
 256           pEfficiencytech(storagetech)        round trip storage efficiency
 257           pChargeDischargeCapRatio       "ratio of charging to discharging" /1/
 258  *EMISSIONS RATES [short ton/MMBtu]
 259           pCO2emratetech(tech)            CO2 emissions rate of potential new generators [short ton per MMBtu]
 260  *EMISSIONS CAP AND COST
 261           pCO2emcap                       CO2 annual emissions cap [short tons]
 262  *RENEWABLE GENERATION CAPS
 263           pCf(renewtech,h)                hourly capacity factors for potential new renewables
 264  *FINANCIAL PARAMETERS
 265           pR                              discount rate
 266           pLife(tech)                     lifetime of tech [years]
 267           pLifeline
 268           pH2Lifeline
 269           pCrf(tech)                      capital recovery factor
 270                   pCrfline
 271  *ZONAL PARAMETERS
 272                  pGenzonetech(tech)
 273  *               pLinesourcetech(ltech)
 274  *               pLinesinktech(ltech)
 275  *               pLinecapactech(ltech)
 276                  pLinecost(l)
 277                  pH2Linecost(l)
 278                  pNMaxLine(l)
 279                  pNMaxH2Line(l)
 280  *               pPeakhtozone(peakH)
 281  *HOURLY RESERVE REQUIREMENTS [GW]
 282           pRegUpReqIncRE(renewtech,h)
 283           pFlexReqIncRE(renewtech,h)
 284  *RESERVE PROVISION PARAMETERS
 285           pRegeligibletech(tech)          candidate plant types eligible to provide reg reserves [0] or not [1]
 286           pFlexeligibletech(tech)
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 287           pConteligibletech(tech)
 288           pMaxflexoffertech(tech)
 289           pMaxcontoffertech(tech)
 290           pMaxregupoffertech(tech)
 291  *PLANNING RESERVE
 292           pPlanningreserve                planning margin reserve capacity [GW]
 293           ;
 294   
GDXIN   C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gdb0.gdx
--- LOAD  ststorageegu = 45:ststorageegu
--- LOAD  ltstorageegu = 46:ltstorageegu
--- LOAD  tech = 47:tech
--- LOAD  dacstech = 58:dacstech
--- LOAD  thermaltech = 48:thermaltech
--- LOAD  CCStech = 51:CCStech
--- LOAD  nucleartech = 49:nucleartech
--- LOAD  CCtech = 50:CCtech
--- LOAD  renewtech = 52:renewtech
--- LOAD  solartech = 54:solartech
--- LOAD  windtech = 53:windtech
--- LOAD  storagetech = 55:storagetech
--- LOAD  ststoragetech = 56:ststoragetech
--- LOAD  ltstoragetech = 57:ltstoragetech
--- LOAD  peakH = 44:peakh
--- LOAD  pNMaxWind = 74:pNMaxWind
--- LOAD  pNMaxSolar = 75:pNMaxSolar
--- LOAD  pNMaxNuclear = 76:pNMaxNuclear
--- LOAD  pNMaxCC = 78:pNMaxCC
--- LOAD  pNMaxCCS = 77:pNMaxCCS
--- LOAD  pNMaxDACS = 79:pNMaxDACS
--- LOAD  pPMaxSto = 80:pPMaxSto
--- LOAD  pEMaxSto = 81:pEMaxSto
--- LOAD  pCapactech = 66:pCapactech
--- LOAD  pHrtech = 62:pHrtech
--- LOAD  pOpcosttech = 65:pOpcosttech
--- LOAD  pNMaxH2Line = 93:pNMaxH2Line
--- LOAD  pH2Lifeline = 92:pH2Lifeline
--- LOAD  pH2Linecost = 91:pH2Linecost
--- LOAD  pFom = 68:pFom
--- LOAD  pOcc = 69:pOcc
--- LOAD  pPowOcc = 71:pPowOcc
--- LOAD  pEneOcc = 72:pEneOcc
--- LOAD  pRampratetech = 64:pRampratetech
--- LOAD  pCO2emratetech = 63:pCO2emratetech
--- LOAD  pEfficiencytech = 87:pEfficiencytech
--- LOAD  pCO2emcap = 61:pCO2emcap
--- LOAD  pCf = 73:pCf
--- LOAD  pR = 60:pR
--- LOAD  pLife = 70:pLife
--- LOAD  pLifeline = 90:pLifeline
--- LOAD  pGenzonetech = 67:pGenzonetech
--- LOAD  pLinecost = 88:pLinecost
--- LOAD  pNMaxLine = 89:pNMaxLine
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


--- LOAD  pRegUpReqIncRE = 82:pRegUpReqIncRE
--- LOAD  pFlexReqIncRE = 83:pFlexReqIncRE
--- LOAD  pFlexeligibletech = 85:pFlexeligibletech
--- LOAD  pConteligibletech = 86:pConteligibletech
--- LOAD  pRegeligibletech = 84:pRegeligibletech
--- LOAD  pPlanningreserve = 59:pPlanningreserve
 308   
 309  *DEFINE SET EXCLUSIONS
 310  nonrenewegu(egu) = not renewegu(egu);
 311  nonstoragetech(tech) = not storagetech(tech);
 312  notdacstech(tech) = not dacstech(tech);
 313  gentechs(tech) = not (dacstech(tech) + storagetech(tech));
 314  *CALCULATE CAPITAL RECOVERY FACTOR
 315  pCrf(tech) = pR / (1 - (1 / ( (1 + pR)**pLife(tech))));
 316  pCrfline = pR / (1 - (1 / ( (1 + pR)**pLifeline)));
 317  *CALCULATE PE RATIO FOR SHORTTERM STORAGE
 318  pPERatio(ststoragetech) = pEMaxSto(ststoragetech)/pPMaxSto(ststoragetech);
 319  *CALCULATE MAX RESERVE OFFERS
 320  pMaxflexoffertech(tech) = pFlexeligibletech(tech)*pRampratetech(tech)*pRampratetoflexreservescalar;
 321  pMaxcontoffertech(tech) = pConteligibletech(tech)*pRampratetech(tech)*pRampratetocontreservescalar;
 322  pMaxregupoffertech(tech) = pRegeligibletech(tech)*pRampratetech(tech)*pRampratetoregreservescalar;
 323   
 324  Variable
 325                   vVarcosttech(tech,h)
 326           vVarcostannual                             total variable costs for new and existing plants = variable O&M + fuel + emission costs [thousandUSD per yr]
 327                   vFixedcostannual                             total investment costs for new plants = fixed O&M + overnight capital costs [thousandUSD per yr]
 328           vGentech(tech,h)                hourly electricity generation by new plants [GWh]
 329  *Emission variables
 330                   vCO2emstech(tech,h)
 331           vCO2emsannual                   co2 emissions in entire year from new and existing plants [short ton]
 332           ;
 333   
 334  Positive variables
 335  *Reserve requirements
 336           vRegupreserve(z,h)                amount of reg up reserves [GW]
 337           vFlexreserve(z,h)
 338  *Generation and reserve variables
 339           vReguptech(tech,h)              hourly reg up reserves provided by new plants [GWh]
 340           vFlextech(tech,h)
 341           vConttech(tech,h)
 342  *Storage
 343                   vStateofchargetech(storagetech,h)            "energy stored in storage unit at end of hour h (GWh)"
 344                   vChargetech(storagetech,h)                           "charged energy by storage unit in hour h (GWh)"
 345                   vPowBuiltSto(storagetech)                      built power capacity for storage
 346                   vEneBuiltSto(storagetech)                      built energy capacity for storage
 347  *Line builds and flows
 348                  vNl(l)
 349                  vLinecapacnew(l)
 350  *               vLinenewflow(ltech,h)
 351                     ;
 352   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CEBuildVariable.gms
 354  Positive Variable
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               09/22/22 10:39:54 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 355          vN(tech)
 356          ;
 357   
 358  Equations
 359  *Costs
 360                  calcvarcoststech(tech,h)
 361                  investmentcost
 362  *Meet demand and reserves
 363           meetdemand(z,h)                   meet supply with demand
 364           meetreservemargin               meet planning reserve requirement with installed capacity
 365           setflexreserve(z,h)               determine quantity of required spin reserves
 366           setregupreserve(z,h)              determine quantity of required reg up reserves
 367           meetflexreserve(z,h)              meet spin reserve requirement
 368           meetcontreserve(z,h)              meet contingency reserve requirement
 369           meetregupreserve(z,h)             meet reg up reserve requirement
 370           limitshiftingdemandupper(z,h)          limit the amount of demand that can be shifted
 371           limitshiftingdemandlower(z,h)          limit the amount of demand that can be shifted
 372           meetshiftingdemand(z,h)
 373                  limitLineFlows(l,h)
 374                  linecapacnew(l,ll)
 375   
 376  *Maximum build constraints
 377                   maxSolar(solartech)
 378                   maxWind(windtech)
 379                   maxNuclear(nucleartech)
 380                   maxCCS(CCStech)
 381                   maxCC(CCtech)
 382                   maxDAC(dacstech)
 383                   maxPSto(storagetech)
 384                   setVNSto(storagetech)
 385                   maxELTSto(ltstoragetech)
 386                   maxESTSto(ststoragetech)
 387                                   maxL(l)
 388  *                 biLineLimit(l)
 389  *Carbon emissions
 390                  calcco2emstech(tech,h)
 391           ;
 392   
 393  *****************CALCULATE COSTS*******************
 394  *Variable costs for new techs
 395  calcvarcoststech(tech,h).. vVarcosttech(tech,h) =e= vGentech(tech,h)*pOpcosttech(tech);
 396   
 397  *Fixed costs = annual fixed O&M + fixed annualized capital costs
 398  investmentcost..         vFixedcostannual =e= sum(nonstoragetech,vN(nonstoragetech)*pCapactech(nonstoragetech)*(pFom(nonstoragetech)+pOcc(nonstoragetech)*pCrf(nonstoragetech)))
 399                                                   + sum(storagetech,vPowBuiltSto(storagetech)*pPowOcc(storagetech)*pCrf(storagetech)+vEneBuiltSto(storagetech)*pEneOcc(storagetech)*pCrf(storagetech))
 400                                                                                                   + sum(l,vNl(l)*pLinecost(l)*pCrfline);
 401  ***************************************************
 402   
 403  ******************SYSTEM-WIDE GENERATION AND RESERVE CONSTRAINTS*******************
 404  *Demand = generation by new and existing plants
 405  meetdemand(z,h)..          sum(tech$[pGenzonetech(tech)=ORD(z)],vGentech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vGen(egu,h)) +
 406                                                          sum(l$[pLinesink(l)=ORD(z)],vLineflow(l,h))*pTransEff =g= (pDemand(z,h) + vShiftedDemand(z,h)
 407                                                          + sum(storageegu$[pGenzone(storageegu)=ORD(z)],vCharge(storageegu,h)) + sum(storagetech$[pGenzonetech(storagetech)=ORD(z)],vChargetech(storagetech,h))
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 408                                                                                                                  + sum(l$[pLinesource(l)=ORD(z)],vLineflow(l,h)));
 409   
 410  *meetdemand(z,h)..          sum(tech$[pGenzonetech(tech)=ORD(z)],vGentech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vGen(egu,h)) =g= pDemand(z,h);
 411   
 412  *Demand response
 413  limitshiftingdemandupper(z,h)..       vShiftedDemand(z,h) =l= pDemand(z,h)*pDemandShifter;
 414  limitshiftingdemandlower(z,h)..       vShiftedDemand(z,h) =g= -1*pDemand(z,h)*pDemandShifter;
 415  meetshiftingdemand(z,h)$(mod(ord(h),pDemandShiftingBlock)=1).. sum(hh$((ord(hh)>=ord(h) and (ord(hh)<=ord(h)+pDemandShiftingBlock-1))), vShiftedDemand(z,h))=e= 0;
 416   
 417  *Meet planning reserve margin
 418  meetreservemargin..       sum(thermaltech,pCapactech(thermaltech)*vN(thermaltech))
 419                             + sum(storagetech,vPowBuiltSto(storagetech))
 420                             + sum((renewtech,peakH),pCapactech(renewtech)*vN(renewtech)*pCf(renewtech,peakH))
 421                             + sum(nonrenewegu,pCapac(nonrenewegu))
 422                             + sum((z,peakH),pMaxgenwind(z,peakH) + pMaxgensolar(z,peakH)) =g= pPlanningreserve;
 423   
 424  *Define spinning and reg reserve requirement based on new builds
 425  setflexreserve(z,h)..      sum(renewtech$[pGenzonetech(renewtech)=ORD(z)],vN(renewtech)*pCapactech(renewtech)*pFlexReqIncRE(renewtech,h)) + pFlexreserves(z,h) =e= vFlexreserve(z,h);
 426  setregupreserve(z,h)..     sum(renewtech$[pGenzonetech(renewtech)=ORD(z)],vN(renewtech)*pCapactech(renewtech)*pRegUpReqIncRE(renewtech,h)) + pRegupreserves(z,h) =e= vRegupreserve(z,h);
 427   
 428  *Meet spinning and regulation reserve requirements
 429  meetflexreserve(z,h)..     sum(tech$[pGenzonetech(tech)=ORD(z)],vFlextech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vFlex(egu,h)) =g= vFlexreserve(z,h);
 430  meetcontreserve(z,h)..     sum(tech$[pGenzonetech(tech)=ORD(z)],vConttech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vCont(egu,h)) =g= pContreserves(z,h);
 431  meetregupreserve(z,h)..    sum(tech$[pGenzonetech(tech)=ORD(z)],vReguptech(tech,h)) + sum(egu$[pGenzone(egu)=ORD(z)],vRegup(egu,h)) =g= vRegupreserve(z,h);
 432   
 433  *Limit line flows on new lines
 434  linecapacnew(l,ll)$(pLinesource(l)=pLinesink(ll) and pLinesource(ll)=pLinesink(l)).. vLinecapacnew(l) =e= vNl(l) + vNl(ll);
 435  limitLineFlows(l,h).. pLinecapac(l)+vLinecapacnew(l) =g= vLineflow(l,h);
 436  *new lines with same sources and sinks have the same capacity:
 437  *biLineLimit(l,ll)$(pLinesource(l)=pLinesink(ll) and pLinesource(ll)=pLinesink(l)).. vNl(l) =e= vNl(ll);
 438  ***********************************************************************************
 439   
 440  *************UPPER AND LOWER GENERATION BOUNDS*****
 441  *Set lower bound to zero for generation by storage and generating techs.
 442  vGentech.lo(notdacstech,h) = 0;
 443  *Set upper bound to zero for DACS techs. DACS max capacity is negative and has negative vGen values.
 444  vGentech.up(dacstech,h) = 0;
 445  ***************************************************
 446   
 447  ******************BUILD DECISIONS******************
 448  *Limit number builds to input value.
 449  maxWind(windtech) .. vN(windtech) =l= pNMaxWind;
 450  maxSolar(solartech) .. vN(solartech) =l= pNMaxSolar;
 451  maxNuclear(nucleartech) .. vN(nucleartech) =l= pNMaxNuclear;
 452  maxCCS(CCStech) .. vN(CCStech) =l= pNMaxCCS(CCStech);
 453  maxCC(CCtech) .. vN(CCtech) =l= pNMaxCC;
 454  maxDAC(dacstech) .. vN(dacstech) =l= pNMaxDACS(dacstech);
 455  maxPSto(storagetech) .. vPowBuiltSto(storagetech) =l= pPMaxSto(storagetech);
 456  setVNSto(storagetech) .. vN(storagetech) =e= vPowBuiltSto(storagetech)/pCapactech(storagetech);
 457  maxELTSto(ltstoragetech) .. vEneBuiltSto(ltstoragetech) =l= pEMaxSto(ltstoragetech);
 458  maxESTSto(ststoragetech) .. vEneBuiltSto(ststoragetech) =e= pPERatio(ststoragetech)*vPowBuiltSto(ststoragetech);
 459  maxL(l) .. vNl(l) =l= pNMaxLine(l);
 460   
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 461  ***************************************************
 462   
 463  ******************RESERVE CONSTRAINTS******************
 464  vFlextech.fx(tech,h)$[pMaxflexoffertech(tech)=0] = 0;
 465  vConttech.fx(tech,h)$[pMaxcontoffertech(tech)=0] = 0;
 466  vReguptech.fx(tech,h)$[pMaxregupoffertech(tech)=0] = 0;
 467  *******************************************************
 468   
 469  ********CALCULATE CO2 EMISSIONS*************
 470  calcco2emstech(tech,h) .. vCO2emstech(tech,h) =e= vGentech(tech,h)*pHrtech(tech)*pCO2emratetech(tech);
 471  ********************************************
 472   
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\StorageEDModule.gms
 474  *Michael Craig 14 May 2020
 475   
 476  Equations
 477  *Limit storage generation plus up reserves
 478                   limitstorageresup(storageegu,h)
 479                  ;
 480   
 481  ******************STORAGE CONSTRAINTS*********************************
 482  *Limit up reserves to spare capacity while discharging & to charge amount while charging
 483  limitstorageresup(storageegu,h) .. vRegup(storageegu,h) + vFlex(storageegu,h) + vCont(storageegu,h) =l= (pCapac(storageegu) - vGen(storageegu,h)) + vCharge(storageegu,h);
 484  **********************************************************************
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\EDVarsAndConstraints.gms
 486  *Michael Craig 14 May 2020
 487   
 488  Equations
 489  *Generation and reserve constraints
 490           limitflexres(egu,h)             limit spin reserves by existing plants by ramp rate
 491           limitcontres(egu,h)             limit cont reserves by existing plants by ramp rate
 492           limitregupres(egu,h)            limit reg reserves by existing plants by ramp rate
 493           ;
 494   
 495  ******************GENERATION AND RESERVE CONSTRAINTS******************
 496  *Limit spining and regulation reserves each to ramp capability and time of reserve
 497  limitflexres(egu,h)$[pMaxflexoffer(egu)>0] .. vFlex(egu,h) =l= pMaxflexoffer(egu);
 498  limitcontres(egu,h)$[pMaxcontoffer(egu)>0] .. vCont(egu,h) =l= pMaxcontoffer(egu);
 499  limitregupres(egu,h)$[pMaxregupoffer(egu)>0] .. vRegup(egu,h) =l= pMaxregupoffer(egu);
 500  **********************************************************************
INCLUDE    C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CETimeDependentConstraints.gms
 502  Sets
 503          block0h(h)
 504          block1h(h)
 505          block2h(h)
 506          blockpeaktotal3h(h)
 507          blockpeaknet4h(h)
 508          blockpeaknetramp5h(h)
 509          block6h(h)
 510          ;
 511   
 512  Parameters
 513          pWeightblock0h
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 514          pWeightblock1h
 515          pWeightblock2h
 516          pWeightblockpeaktotal3h
 517          pWeightblockpeaknet4h
 518          pWeightblockpeaknetramp5h
 519          pWeightblock6h
 520          pInitSOC(storageegu)
 521          pInitSOCtech(storagetech)
 522          pHourInitblock0h
 523          pHourFinalblock0h
 524          pHourInitblock1h
 525          pHourFinalblock1h
 526          pSOCScalarblock1h
 527          pHourInitblock2h
 528          pHourFinalblock2h
 529          pSOCScalarblock2h
 530          pHourInitblockpeaktotal3h
 531          pHourFinalblockpeaktotal3h
 532          pSOCScalarblockpeaktotal3h
 533          pHourInitblockpeaknet4h
 534          pHourFinalblockpeaknet4h
 535          pSOCScalarblockpeaknet4h
 536          pHourInitblockpeaknetramp5h
 537          pHourFinalblockpeaknetramp5h
 538          pSOCScalarblockpeaknetramp5h
 539          pHourInitblock6h
 540          pHourFinalblock6h
 541          pSOCScalarblock6h
 542          pMaxgenhydroblock0h(z)
 543          pMaxgenhydroblock1h(z)
 544          pMaxgenhydroblock2h(z)
 545          pMaxgenhydroblockpeaktotal3h(z)
 546          pMaxgenhydroblockpeaknet4h(z)
 547          pMaxgenhydroblockpeaknetramp5h(z)
 548          pMaxgenhydroblock6h(z)
 549          ;
 550   
GDXIN   C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gdb0.gdx
--- LOAD  block0h = 94:block0h
--- LOAD  block1h = 95:block1h
--- LOAD  block2h = 96:block2h
--- LOAD  blockpeaktotal3h = 97:blockpeaktotal3h
--- LOAD  blockpeaknet4h = 98:blockpeaknet4h
--- LOAD  blockpeaknetramp5h = 99:blockpeaknetramp5h
--- LOAD  block6h = 100:block6h
--- LOAD  pWeightblock0h = 101:pWeightblock0h
--- LOAD  pWeightblock1h = 102:pWeightblock1h
--- LOAD  pWeightblock2h = 103:pWeightblock2h
--- LOAD  pWeightblockpeaktotal3h = 104:pWeightblockpeaktotal3h
--- LOAD  pWeightblockpeaknet4h = 105:pWeightblockpeaknet4h
--- LOAD  pWeightblockpeaknetramp5h = 106:pWeightblockpeaknetramp5h
--- LOAD  pWeightblock6h = 107:pWeightblock6h
--- LOAD  pSOCScalarblock1h = 108:pSOCScalarblock1h
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 13
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


--- LOAD  pSOCScalarblock2h = 109:pSOCScalarblock2h
--- LOAD  pSOCScalarblockpeaktotal3h = 110:pSOCScalarblockpeaktotal3h
--- LOAD  pSOCScalarblockpeaknet4h = 111:pSOCScalarblockpeaknet4h
--- LOAD  pSOCScalarblockpeaknetramp5h = 112:pSOCScalarblockpeaknetramp5h
--- LOAD  pSOCScalarblock6h = 113:pSOCScalarblock6h
--- LOAD  pInitSOC = 114:pInitSOC
--- LOAD  pInitSOCtech = 115:pInitSOCtech
--- LOAD  pMaxgenhydroblock0h = 116:pMaxgenhydroblock0h
--- LOAD  pMaxgenhydroblock1h = 117:pMaxgenhydroblock1h
--- LOAD  pMaxgenhydroblock2h = 118:pMaxgenhydroblock2h
--- LOAD  pMaxgenhydroblockpeaktotal3h = 122:pMaxgenhydroblockpeaktotal3h
--- LOAD  pMaxgenhydroblockpeaknet4h = 120:pMaxgenhydroblockpeaknet4h
--- LOAD  pMaxgenhydroblockpeaknetramp5h = 121:pMaxgenhydroblockpeaknetramp5h
--- LOAD  pMaxgenhydroblock6h = 119:pMaxgenhydroblock6h
 559   
 560  pHourInitblock0h = smin(h$block0h(h),ord(h));
 561  pHourFinalblock0h = smax(h$block0h(h),ord(h));
 562  pHourInitblock1h = smin(h$block1h(h),ord(h));
 563  pHourFinalblock1h = smax(h$block1h(h),ord(h));
 564  pHourInitblock2h = smin(h$block2h(h),ord(h));
 565  pHourFinalblock2h = smax(h$block2h(h),ord(h));
 566  pHourInitblockpeaktotal3h = smin(h$blockpeaktotal3h(h),ord(h));
 567  pHourFinalblockpeaktotal3h = smax(h$blockpeaktotal3h(h),ord(h));
 568  pHourInitblockpeaknet4h = smin(h$blockpeaknet4h(h),ord(h));
 569  pHourFinalblockpeaknet4h = smax(h$blockpeaknet4h(h),ord(h));
 570  pHourInitblockpeaknetramp5h = smin(h$blockpeaknetramp5h(h),ord(h));
 571  pHourFinalblockpeaknetramp5h = smax(h$blockpeaknetramp5h(h),ord(h));
 572  pHourInitblock6h = smin(h$block6h(h),ord(h));
 573  pHourFinalblock6h = smax(h$block6h(h),ord(h));
 574   
 575  nonInitH(h)= yes;
 576  nonInitH(h)$[ord(h)=pHourInitblock0h] = no;
 577  nonInitH(h)$[ord(h)=pHourInitblock1h] = no;
 578  nonInitH(h)$[ord(h)=pHourInitblock2h] = no;
 579  nonInitH(h)$[ord(h)=pHourInitblockpeaktotal3h] = no;
 580  nonInitH(h)$[ord(h)=pHourInitblockpeaknet4h] = no;
 581  nonInitH(h)$[ord(h)=pHourInitblockpeaknetramp5h] = no;
 582  nonInitH(h)$[ord(h)=pHourInitblock6h] = no;
 583   
 584  Variables
 585          vInitSOCblock1h(storageegu)
 586          vInitSOCblock2h(storageegu)
 587          vInitSOCblockpeaktotal3h(storageegu)
 588          vInitSOCblockpeaknet4h(storageegu)
 589          vInitSOCblockpeaknetramp5h(storageegu)
 590          vInitSOCblock6h(storageegu)
 591          vInitSOCblock1htech(storagetech)
 592          vInitSOCblock2htech(storagetech)
 593          vInitSOCblockpeaktotal3htech(storagetech)
 594          vInitSOCblockpeaknet4htech(storagetech)
 595          vInitSOCblockpeaknetramp5htech(storagetech)
 596          vInitSOCblock6htech(storagetech)
 597          vFinalSOCblock0h(storageegu)
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 14
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 598          vFinalSOCblock1h(storageegu)
 599          vFinalSOCblock2h(storageegu)
 600          vFinalSOCblockpeaktotal3h(storageegu)
 601          vFinalSOCblockpeaknet4h(storageegu)
 602          vFinalSOCblockpeaknetramp5h(storageegu)
 603          vFinalSOCblock6h(storageegu)
 604          vFinalSOCblock0htech(storagetech)
 605          vFinalSOCblock1htech(storagetech)
 606          vFinalSOCblock2htech(storagetech)
 607          vFinalSOCblockpeaktotal3htech(storagetech)
 608          vFinalSOCblockpeaknet4htech(storagetech)
 609          vFinalSOCblockpeaknetramp5htech(storagetech)
 610          vFinalSOCblock6htech(storagetech)
 611          vChangeSOCblock0h(storageegu)
 612          vChangeSOCblock1h(storageegu)
 613          vChangeSOCblock2h(storageegu)
 614          vChangeSOCblockpeaktotal3h(storageegu)
 615          vChangeSOCblockpeaknet4h(storageegu)
 616          vChangeSOCblockpeaknetramp5h(storageegu)
 617          vChangeSOCblock6h(storageegu)
 618          vChangeSOCblock0htech(storagetech)
 619          vChangeSOCblock1htech(storagetech)
 620          vChangeSOCblock2htech(storagetech)
 621          vChangeSOCblockpeaktotal3htech(storagetech)
 622          vChangeSOCblockpeaknet4htech(storagetech)
 623          vChangeSOCblockpeaknetramp5htech(storagetech)
 624          vChangeSOCblock6htech(storagetech)
 625          ;
 626   
 627  Equations
 628          varCost
 629          co2Ems
 630          defSOC(storageegu,h)
 631          genPlusUpResToSOC(storageegu,h)
 632          setInitSOCblock1hltstorageegu(ltstorageegu)
 633          setInitSOCblock2hltstorageegu(ltstorageegu)
 634          setInitSOCblockpeaktotal3hltstorageegu(ltstorageegu)
 635          setInitSOCblockpeaknet4hltstorageegu(ltstorageegu)
 636          setInitSOCblockpeaknetramp5hltstorageegu(ltstorageegu)
 637          setInitSOCblock6hltstorageegu(ltstorageegu)
 638          defFinalSOCblock0h(storageegu,h)
 639          defChangeSOCblock0h(storageegu)
 640          defFinalSOCblock1h(storageegu,h)
 641          defChangeSOCblock1h(storageegu)
 642          defFinalSOCblock2h(storageegu,h)
 643          defChangeSOCblock2h(storageegu)
 644          defFinalSOCblockpeaktotal3h(storageegu,h)
 645          defChangeSOCblockpeaktotal3h(storageegu)
 646          defFinalSOCblockpeaknet4h(storageegu,h)
 647          defChangeSOCblockpeaknet4h(storageegu)
 648          defFinalSOCblockpeaknetramp5h(storageegu,h)
 649          defChangeSOCblockpeaknetramp5h(storageegu)
 650          defFinalSOCblock6h(storageegu,h)
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 15
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 651          defChangeSOCblock6h(storageegu)
 652          setInitSOCblock1hststorageegu(ststorageegu)
 653          setInitSOCblock2hststorageegu(ststorageegu)
 654          setInitSOCblockpeaktotal3hststorageegu(ststorageegu)
 655          setInitSOCblockpeaknet4hststorageegu(ststorageegu)
 656          setInitSOCblockpeaknetramp5hststorageegu(ststorageegu)
 657          setInitSOCblock6hststorageegu(ststorageegu)
 658          defSOCtech(storagetech,h)
 659          genPlusUpResToSOCtech(storagetech,h)
 660          setInitSOCblock1hltstoragetech(ltstoragetech)
 661          setInitSOCblock2hltstoragetech(ltstoragetech)
 662          setInitSOCblockpeaktotal3hltstoragetech(ltstoragetech)
 663          setInitSOCblockpeaknet4hltstoragetech(ltstoragetech)
 664          setInitSOCblockpeaknetramp5hltstoragetech(ltstoragetech)
 665          setInitSOCblock6hltstoragetech(ltstoragetech)
 666          defFinalSOCblock0htech(storagetech,h)
 667          defChangeSOCblock0htech(storagetech)
 668          defFinalSOCblock1htech(storagetech,h)
 669          defChangeSOCblock1htech(storagetech)
 670          defFinalSOCblock2htech(storagetech,h)
 671          defChangeSOCblock2htech(storagetech)
 672          defFinalSOCblockpeaktotal3htech(storagetech,h)
 673          defChangeSOCblockpeaktotal3htech(storagetech)
 674          defFinalSOCblockpeaknet4htech(storagetech,h)
 675          defChangeSOCblockpeaknet4htech(storagetech)
 676          defFinalSOCblockpeaknetramp5htech(storagetech,h)
 677          defChangeSOCblockpeaknetramp5htech(storagetech)
 678          defFinalSOCblock6htech(storagetech,h)
 679          defChangeSOCblock6htech(storagetech)
 680          setInitSOCblock1hststoragetech(ststoragetech)
 681          setInitSOCblock2hststoragetech(ststoragetech)
 682          setInitSOCblockpeaktotal3hststoragetech(ststoragetech)
 683          setInitSOCblockpeaknet4hststoragetech(ststoragetech)
 684          setInitSOCblockpeaknetramp5hststoragetech(ststoragetech)
 685          setInitSOCblock6hststoragetech(ststoragetech)
 686          rampUpblock0h(egu,block0h)
 687          rampUpblock1h(egu,block1h)
 688          rampUpblock2h(egu,block2h)
 689          rampUpblockpeaktotal3h(egu,blockpeaktotal3h)
 690          rampUpblockpeaknet4h(egu,blockpeaknet4h)
 691          rampUpblockpeaknetramp5h(egu,blockpeaknetramp5h)
 692          rampUpblock6h(egu,block6h)
 693          rampUpblock0htech(tech,block0h)
 694          rampUpblock1htech(tech,block1h)
 695          rampUpblock2htech(tech,block2h)
 696          rampUpblockpeaktotal3htech(tech,blockpeaktotal3h)
 697          rampUpblockpeaknet4htech(tech,blockpeaknet4h)
 698          rampUpblockpeaknetramp5htech(tech,blockpeaknetramp5h)
 699          rampUpblock6htech(tech,block6h)
 700          limitHydroGenblock0h(z)
 701          limitHydroGenblock1h(z)
 702          limitHydroGenblock2h(z)
 703          limitHydroGenblockpeaktotal3h(z)
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 16
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 704          limitHydroGenblockpeaknet4h(z)
 705          limitHydroGenblockpeaknetramp5h(z)
 706          limitHydroGenblock6h(z)
 707          ;
 708   
 709  defSOC(storageegu,h).. vStateofcharge(storageegu,h) =e= pInitSOC(storageegu)$[ord(h)=pHourInitblock0h] + vInitSOCblock1h(storageegu)$[ord(h)=pHourInitblock1h] + vInitSOCblock2h(storageegu)$[ord(h)=pHourInitblock2h] + vInitSOCblockpeaktotal3h(storage
      egu)$[ord(h)=pHourInitblockpeaktotal3h] + vInitSOCblockpeaknet4h(storageegu)$[ord(h)=pHourInitblockpeaknet4h] + vInitSOCblockpeaknetramp5h(storageegu)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6h(storageegu)$[ord(h)=pHourInitblock6h] +
 710          vStateofcharge(storageegu, h-1)$nonInitH(h) -
 711                 1/sqrt(pEfficiency(storageegu)) * vGen(storageegu,h) +
 712                 sqrt(pEfficiency(storageegu)) * vCharge(storageegu,h);
 713  genPlusUpResToSOC(storageegu,h).. vGen(storageegu,h)+vRegup(storageegu,h)+vFlex(storageegu,h)+vCont(storageegu,h) =l= vStateofcharge(storageegu, h-1)$nonInitH(h)
 714                       + pInitSOC(storageegu)$[ord(h)=pHourInitblock0h] + vInitSOCblock1h(storageegu)$[ord(h)=pHourInitblock1h] + vInitSOCblock2h(storageegu)$[ord(h)=pHourInitblock2h] + vInitSOCblockpeaktotal3h(storageegu)$[ord(h)=pHourInitblockpeakto
      tal3h] + vInitSOCblockpeaknet4h(storageegu)$[ord(h)=pHourInitblockpeaknet4h] + vInitSOCblockpeaknetramp5h(storageegu)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6h(storageegu)$[ord(h)=pHourInitblock6h];
 715  setInitSOCblock1hltstorageegu(ltstorageegu).. vInitSOCblock1h(ltstorageegu) =e= vFinalSOCblock0h(ltstorageegu) + vChangeSOCblock0h(ltstorageegu)*pSOCScalarblock1h
 716                          ;
 717  setInitSOCblock2hltstorageegu(ltstorageegu).. vInitSOCblock2h(ltstorageegu) =e= vFinalSOCblock1h(ltstorageegu) + vChangeSOCblock1h(ltstorageegu)*pSOCScalarblock2h
 718                          ;
 719  setInitSOCblockpeaktotal3hltstorageegu(ltstorageegu).. vInitSOCblockpeaktotal3h(ltstorageegu) =e= vFinalSOCblock2h(ltstorageegu) + vChangeSOCblock2h(ltstorageegu)*pSOCScalarblockpeaktotal3h
 720                          ;
 721  setInitSOCblockpeaknet4hltstorageegu(ltstorageegu).. vInitSOCblockpeaknet4h(ltstorageegu) =e= vFinalSOCblock2h(ltstorageegu) + vChangeSOCblock2h(ltstorageegu)*pSOCScalarblockpeaknet4h + vChangeSOCblockpeaktotal3h(ltstorageegu)
 722                          ;
 723  setInitSOCblockpeaknetramp5hltstorageegu(ltstorageegu).. vInitSOCblockpeaknetramp5h(ltstorageegu) =e= vFinalSOCblock2h(ltstorageegu) + vChangeSOCblock2h(ltstorageegu)*pSOCScalarblockpeaknetramp5h + vChangeSOCblockpeaktotal3h(ltstorageegu)+ vChangeSO
      Cblockpeaknet4h(ltstorageegu)
 724                          ;
 725  setInitSOCblock6hltstorageegu(ltstorageegu).. vInitSOCblock6h(ltstorageegu) =e= vFinalSOCblock2h(ltstorageegu) + vChangeSOCblock2h(ltstorageegu)*pSOCScalarblock6h + vChangeSOCblockpeaktotal3h(ltstorageegu)+ vChangeSOCblockpeaknet4h(ltstorageegu)+ vC
      hangeSOCblockpeaknetramp5h(ltstorageegu)
 726                          ;
 727  defFinalSOCblock0h(ltstorageegu,h)$[ord(h)=pHourFinalblock0h].. vFinalSOCblock0h(ltstorageegu) =e=
 728                             vStateofcharge(ltstorageegu,h);
 729  defChangeSOCblock0h(ltstorageegu).. vChangeSOCblock0h(ltstorageegu) =e= vFinalSOCblock0h(ltstorageegu)
 730                                - pInitSOC(ltstorageegu);
 731  defFinalSOCblock1h(ltstorageegu,h)$[ord(h)=pHourFinalblock1h].. vFinalSOCblock1h(ltstorageegu) =e=
 732                             vStateofcharge(ltstorageegu,h);
 733  defChangeSOCblock1h(ltstorageegu).. vChangeSOCblock1h(ltstorageegu) =e= vFinalSOCblock1h(ltstorageegu)
 734                                - vInitSOCblock1h(ltstorageegu);
 735  defFinalSOCblock2h(ltstorageegu,h)$[ord(h)=pHourFinalblock2h].. vFinalSOCblock2h(ltstorageegu) =e=
 736                             vStateofcharge(ltstorageegu,h);
 737  defChangeSOCblock2h(ltstorageegu).. vChangeSOCblock2h(ltstorageegu) =e= vFinalSOCblock2h(ltstorageegu)
 738                                - vInitSOCblock2h(ltstorageegu);
 739  defFinalSOCblockpeaktotal3h(ltstorageegu,h)$[ord(h)=pHourFinalblockpeaktotal3h].. vFinalSOCblockpeaktotal3h(ltstorageegu) =e=
 740                             vStateofcharge(ltstorageegu,h);
 741  defChangeSOCblockpeaktotal3h(ltstorageegu).. vChangeSOCblockpeaktotal3h(ltstorageegu) =e= vFinalSOCblockpeaktotal3h(ltstorageegu)
 742                                - vInitSOCblockpeaktotal3h(ltstorageegu);
 743  defFinalSOCblockpeaknet4h(ltstorageegu,h)$[ord(h)=pHourFinalblockpeaknet4h].. vFinalSOCblockpeaknet4h(ltstorageegu) =e=
 744                             vStateofcharge(ltstorageegu,h);
 745  defChangeSOCblockpeaknet4h(ltstorageegu).. vChangeSOCblockpeaknet4h(ltstorageegu) =e= vFinalSOCblockpeaknet4h(ltstorageegu)
 746                                - vInitSOCblockpeaknet4h(ltstorageegu);
 747  defFinalSOCblockpeaknetramp5h(ltstorageegu,h)$[ord(h)=pHourFinalblockpeaknetramp5h].. vFinalSOCblockpeaknetramp5h(ltstorageegu) =e=
 748                             vStateofcharge(ltstorageegu,h);
 749  defChangeSOCblockpeaknetramp5h(ltstorageegu).. vChangeSOCblockpeaknetramp5h(ltstorageegu) =e= vFinalSOCblockpeaknetramp5h(ltstorageegu)
 750                                - vInitSOCblockpeaknetramp5h(ltstorageegu);
 751  defFinalSOCblock6h(ltstorageegu,h)$[ord(h)=pHourFinalblock6h].. vFinalSOCblock6h(ltstorageegu) =e=
 752                             vStateofcharge(ltstorageegu,h);
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 17
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 753  defChangeSOCblock6h(ltstorageegu).. vChangeSOCblock6h(ltstorageegu) =e= vFinalSOCblock6h(ltstorageegu)
 754                                - vInitSOCblock6h(ltstorageegu);
 755  setInitSOCblock1hststorageegu(ststorageegu).. vInitSOCblock1h(ststorageegu) =e=
 756                                      pInitSOC(ststorageegu);
 757  setInitSOCblock2hststorageegu(ststorageegu).. vInitSOCblock2h(ststorageegu) =e=
 758                                      pInitSOC(ststorageegu);
 759  setInitSOCblockpeaktotal3hststorageegu(ststorageegu).. vInitSOCblockpeaktotal3h(ststorageegu) =e=
 760                                      pInitSOC(ststorageegu);
 761  setInitSOCblockpeaknet4hststorageegu(ststorageegu).. vInitSOCblockpeaknet4h(ststorageegu) =e=
 762                                      pInitSOC(ststorageegu);
 763  setInitSOCblockpeaknetramp5hststorageegu(ststorageegu).. vInitSOCblockpeaknetramp5h(ststorageegu) =e=
 764                                      pInitSOC(ststorageegu);
 765  setInitSOCblock6hststorageegu(ststorageegu).. vInitSOCblock6h(ststorageegu) =e=
 766                                      pInitSOC(ststorageegu);
 767   
 768  defSOCtech(storagetech,h).. vStateofchargetech(storagetech,h) =e= pInitSOCtech(storagetech)$[ord(h)=pHourInitblock0h]*vEneBuiltSto(storagetech) + vInitSOCblock1htech(storagetech)$[ord(h)=pHourInitblock1h] + vInitSOCblock2htech(storagetech)$[ord(h)=p
      HourInitblock2h] + vInitSOCblockpeaktotal3htech(storagetech)$[ord(h)=pHourInitblockpeaktotal3h] + vInitSOCblockpeaknet4htech(storagetech)$[ord(h)=pHourInitblockpeaknet4h] + vInitSOCblockpeaknetramp5htech(storagetech)$[ord(h)=pHourInitblockpeaknetram
      p5h] + vInitSOCblock6htech(storagetech)$[ord(h)=pHourInitblock6h] +
 769          vStateofchargetech(storagetech, h-1)$nonInitH(h) -
 770                 1/sqrt(pEfficiencytech(storagetech)) * vGentech(storagetech,h) +
 771                 sqrt(pEfficiencytech(storagetech)) * vChargetech(storagetech,h);
 772  genPlusUpResToSOCtech(storagetech,h).. vGentech(storagetech,h)+vReguptech(storagetech,h)+vFlextech(storagetech,h)+vConttech(storagetech,h) =l= vStateofchargetech(storagetech, h-1)$nonInitH(h)
 773                       + pInitSOCtech(storagetech)$[ord(h)=pHourInitblock0h]*vEneBuiltSto(storagetech) + vInitSOCblock1htech(storagetech)$[ord(h)=pHourInitblock1h] + vInitSOCblock2htech(storagetech)$[ord(h)=pHourInitblock2h] + vInitSOCblockpeaktotal3h
      tech(storagetech)$[ord(h)=pHourInitblockpeaktotal3h] + vInitSOCblockpeaknet4htech(storagetech)$[ord(h)=pHourInitblockpeaknet4h] + vInitSOCblockpeaknetramp5htech(storagetech)$[ord(h)=pHourInitblockpeaknetramp5h] + vInitSOCblock6htech(storagetech)$[or
      d(h)=pHourInitblock6h];
 774  setInitSOCblock1hltstoragetech(ltstoragetech).. vInitSOCblock1htech(ltstoragetech) =e= vFinalSOCblock0htech(ltstoragetech) + vChangeSOCblock0htech(ltstoragetech)*pSOCScalarblock1h
 775                          ;
 776  setInitSOCblock2hltstoragetech(ltstoragetech).. vInitSOCblock2htech(ltstoragetech) =e= vFinalSOCblock1htech(ltstoragetech) + vChangeSOCblock1htech(ltstoragetech)*pSOCScalarblock2h
 777                          ;
 778  setInitSOCblockpeaktotal3hltstoragetech(ltstoragetech).. vInitSOCblockpeaktotal3htech(ltstoragetech) =e= vFinalSOCblock2htech(ltstoragetech) + vChangeSOCblock2htech(ltstoragetech)*pSOCScalarblockpeaktotal3h
 779                          ;
 780  setInitSOCblockpeaknet4hltstoragetech(ltstoragetech).. vInitSOCblockpeaknet4htech(ltstoragetech) =e= vFinalSOCblock2htech(ltstoragetech) + vChangeSOCblock2htech(ltstoragetech)*pSOCScalarblockpeaknet4h + vChangeSOCblockpeaktotal3htech(ltstoragetech)
 781                          ;
 782  setInitSOCblockpeaknetramp5hltstoragetech(ltstoragetech).. vInitSOCblockpeaknetramp5htech(ltstoragetech) =e= vFinalSOCblock2htech(ltstoragetech) + vChangeSOCblock2htech(ltstoragetech)*pSOCScalarblockpeaknetramp5h + vChangeSOCblockpeaktotal3htech(lts
      toragetech)+ vChangeSOCblockpeaknet4htech(ltstoragetech)
 783                          ;
 784  setInitSOCblock6hltstoragetech(ltstoragetech).. vInitSOCblock6htech(ltstoragetech) =e= vFinalSOCblock2htech(ltstoragetech) + vChangeSOCblock2htech(ltstoragetech)*pSOCScalarblock6h + vChangeSOCblockpeaktotal3htech(ltstoragetech)+ vChangeSOCblockpeakn
      et4htech(ltstoragetech)+ vChangeSOCblockpeaknetramp5htech(ltstoragetech)
 785                          ;
 786  defFinalSOCblock0htech(ltstoragetech,h)$[ord(h)=pHourFinalblock0h].. vFinalSOCblock0htech(ltstoragetech) =e=
 787                             vStateofchargetech(ltstoragetech,h);
 788  defChangeSOCblock0htech(ltstoragetech).. vChangeSOCblock0htech(ltstoragetech) =e= vFinalSOCblock0htech(ltstoragetech)
 789                                - pInitSOCtech(ltstoragetech)*vEneBuiltSto(ltstoragetech);
 790  defFinalSOCblock1htech(ltstoragetech,h)$[ord(h)=pHourFinalblock1h].. vFinalSOCblock1htech(ltstoragetech) =e=
 791                             vStateofchargetech(ltstoragetech,h);
 792  defChangeSOCblock1htech(ltstoragetech).. vChangeSOCblock1htech(ltstoragetech) =e= vFinalSOCblock1htech(ltstoragetech)
 793                                - vInitSOCblock1htech(ltstoragetech);
 794  defFinalSOCblock2htech(ltstoragetech,h)$[ord(h)=pHourFinalblock2h].. vFinalSOCblock2htech(ltstoragetech) =e=
 795                             vStateofchargetech(ltstoragetech,h);
 796  defChangeSOCblock2htech(ltstoragetech).. vChangeSOCblock2htech(ltstoragetech) =e= vFinalSOCblock2htech(ltstoragetech)
 797                                - vInitSOCblock2htech(ltstoragetech);
 798  defFinalSOCblockpeaktotal3htech(ltstoragetech,h)$[ord(h)=pHourFinalblockpeaktotal3h].. vFinalSOCblockpeaktotal3htech(ltstoragetech) =e=
 799                             vStateofchargetech(ltstoragetech,h);
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 18
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 800  defChangeSOCblockpeaktotal3htech(ltstoragetech).. vChangeSOCblockpeaktotal3htech(ltstoragetech) =e= vFinalSOCblockpeaktotal3htech(ltstoragetech)
 801                                - vInitSOCblockpeaktotal3htech(ltstoragetech);
 802  defFinalSOCblockpeaknet4htech(ltstoragetech,h)$[ord(h)=pHourFinalblockpeaknet4h].. vFinalSOCblockpeaknet4htech(ltstoragetech) =e=
 803                             vStateofchargetech(ltstoragetech,h);
 804  defChangeSOCblockpeaknet4htech(ltstoragetech).. vChangeSOCblockpeaknet4htech(ltstoragetech) =e= vFinalSOCblockpeaknet4htech(ltstoragetech)
 805                                - vInitSOCblockpeaknet4htech(ltstoragetech);
 806  defFinalSOCblockpeaknetramp5htech(ltstoragetech,h)$[ord(h)=pHourFinalblockpeaknetramp5h].. vFinalSOCblockpeaknetramp5htech(ltstoragetech) =e=
 807                             vStateofchargetech(ltstoragetech,h);
 808  defChangeSOCblockpeaknetramp5htech(ltstoragetech).. vChangeSOCblockpeaknetramp5htech(ltstoragetech) =e= vFinalSOCblockpeaknetramp5htech(ltstoragetech)
 809                                - vInitSOCblockpeaknetramp5htech(ltstoragetech);
 810  defFinalSOCblock6htech(ltstoragetech,h)$[ord(h)=pHourFinalblock6h].. vFinalSOCblock6htech(ltstoragetech) =e=
 811                             vStateofchargetech(ltstoragetech,h);
 812  defChangeSOCblock6htech(ltstoragetech).. vChangeSOCblock6htech(ltstoragetech) =e= vFinalSOCblock6htech(ltstoragetech)
 813                                - vInitSOCblock6htech(ltstoragetech);
 814  setInitSOCblock1hststoragetech(ststoragetech).. vInitSOCblock1htech(ststoragetech) =e=
 815                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 816  setInitSOCblock2hststoragetech(ststoragetech).. vInitSOCblock2htech(ststoragetech) =e=
 817                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 818  setInitSOCblockpeaktotal3hststoragetech(ststoragetech).. vInitSOCblockpeaktotal3htech(ststoragetech) =e=
 819                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 820  setInitSOCblockpeaknet4hststoragetech(ststoragetech).. vInitSOCblockpeaknet4htech(ststoragetech) =e=
 821                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 822  setInitSOCblockpeaknetramp5hststoragetech(ststoragetech).. vInitSOCblockpeaknetramp5htech(ststoragetech) =e=
 823                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 824  setInitSOCblock6hststoragetech(ststoragetech).. vInitSOCblock6htech(ststoragetech) =e=
 825                                      pInitSOCtech(ststoragetech)*vEneBuiltSto(ststoragetech);
 826   
 827  varCost.. vVarcostannual =e= pWeightblock0h*(sum((egu,block0h),vVarcost(egu,block0h))+sum((tech,block0h),vVarcosttech(tech,block0h)))
 828          + pWeightblock1h*(sum((egu,block1h),vVarcost(egu,block1h))+sum((tech,block1h),vVarcosttech(tech,block1h)))
 829          + pWeightblock2h*(sum((egu,block2h),vVarcost(egu,block2h))+sum((tech,block2h),vVarcosttech(tech,block2h)))
 830          + pWeightblockpeaktotal3h*(sum((egu,blockpeaktotal3h),vVarcost(egu,blockpeaktotal3h))+sum((tech,blockpeaktotal3h),vVarcosttech(tech,blockpeaktotal3h)))
 831          + pWeightblockpeaknet4h*(sum((egu,blockpeaknet4h),vVarcost(egu,blockpeaknet4h))+sum((tech,blockpeaknet4h),vVarcosttech(tech,blockpeaknet4h)))
 832          + pWeightblockpeaknetramp5h*(sum((egu,blockpeaknetramp5h),vVarcost(egu,blockpeaknetramp5h))+sum((tech,blockpeaknetramp5h),vVarcosttech(tech,blockpeaknetramp5h)))
 833          + pWeightblock6h*(sum((egu,block6h),vVarcost(egu,block6h))+sum((tech,block6h),vVarcosttech(tech,block6h)));
 834  co2Ems.. vCO2emsannual =e= pWeightblock0h*(sum((egu,block0h),vCO2ems(egu,block0h))+sum((tech,block0h),vCO2emstech(tech,block0h)))
 835          + pWeightblock1h*(sum((egu,block1h),vCO2ems(egu,block1h))+sum((tech,block1h),vCO2emstech(tech,block1h)))
 836          + pWeightblock2h*(sum((egu,block2h),vCO2ems(egu,block2h))+sum((tech,block2h),vCO2emstech(tech,block2h)))
 837          + pWeightblockpeaktotal3h*(sum((egu,blockpeaktotal3h),vCO2ems(egu,blockpeaktotal3h))+sum((tech,blockpeaktotal3h),vCO2emstech(tech,blockpeaktotal3h)))
 838          + pWeightblockpeaknet4h*(sum((egu,blockpeaknet4h),vCO2ems(egu,blockpeaknet4h))+sum((tech,blockpeaknet4h),vCO2emstech(tech,blockpeaknet4h)))
 839          + pWeightblockpeaknetramp5h*(sum((egu,blockpeaknetramp5h),vCO2ems(egu,blockpeaknetramp5h))+sum((tech,blockpeaknetramp5h),vCO2emstech(tech,blockpeaknetramp5h)))
 840          + pWeightblock6h*(sum((egu,block6h),vCO2ems(egu,block6h))+sum((tech,block6h),vCO2emstech(tech,block6h)));
 841   
 842  limitHydroGenblock0h(z)..sum((hydroegu,block0h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block0h)) =l= pMaxgenhydroblock0h(z);
 843  limitHydroGenblock1h(z)..sum((hydroegu,block1h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block1h)) =l= pMaxgenhydroblock1h(z);
 844  limitHydroGenblock2h(z)..sum((hydroegu,block2h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block2h)) =l= pMaxgenhydroblock2h(z);
 845  limitHydroGenblockpeaktotal3h(z)..sum((hydroegu,blockpeaktotal3h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,blockpeaktotal3h)) =l= pMaxgenhydroblockpeaktotal3h(z);
 846  limitHydroGenblockpeaknet4h(z)..sum((hydroegu,blockpeaknet4h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,blockpeaknet4h)) =l= pMaxgenhydroblockpeaknet4h(z);
 847  limitHydroGenblockpeaknetramp5h(z)..sum((hydroegu,blockpeaknetramp5h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,blockpeaknetramp5h)) =l= pMaxgenhydroblockpeaknetramp5h(z);
 848  limitHydroGenblock6h(z)..sum((hydroegu,block6h)$[pGenzone(hydroegu)=ORD(z)],vGen(hydroegu,block6h)) =l= pMaxgenhydroblock6h(z);
 849   
 850  rampUpblock0h(egu,block0h)$[ORD(block0h)>1].. vGen(egu,block0h)+vRegup(egu,block0h)+vFlex(egu,block0h)+vCont(egu,block0h) - vGen(egu,block0h-1) =l=
 851                    pRamprate(egu);
 852  rampUpblock0htech(tech,block0h)$[ORD(block0h)>1].. vGentech(tech,block0h)+vReguptech(tech,block0h)+vFlextech(tech,block0h)+vConttech(tech,block0h) - vGentech(tech,block0h-1) =l=
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 19
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 853                    pRampratetech(tech)*vN(tech);
 854  rampUpblock1h(egu,block1h)$[ORD(block1h)>1].. vGen(egu,block1h)+vRegup(egu,block1h)+vFlex(egu,block1h)+vCont(egu,block1h) - vGen(egu,block1h-1) =l=
 855                    pRamprate(egu);
 856  rampUpblock1htech(tech,block1h)$[ORD(block1h)>1].. vGentech(tech,block1h)+vReguptech(tech,block1h)+vFlextech(tech,block1h)+vConttech(tech,block1h) - vGentech(tech,block1h-1) =l=
 857                    pRampratetech(tech)*vN(tech);
 858  rampUpblock2h(egu,block2h)$[ORD(block2h)>1].. vGen(egu,block2h)+vRegup(egu,block2h)+vFlex(egu,block2h)+vCont(egu,block2h) - vGen(egu,block2h-1) =l=
 859                    pRamprate(egu);
 860  rampUpblock2htech(tech,block2h)$[ORD(block2h)>1].. vGentech(tech,block2h)+vReguptech(tech,block2h)+vFlextech(tech,block2h)+vConttech(tech,block2h) - vGentech(tech,block2h-1) =l=
 861                    pRampratetech(tech)*vN(tech);
 862  rampUpblockpeaktotal3h(egu,blockpeaktotal3h)$[ORD(blockpeaktotal3h)>1].. vGen(egu,blockpeaktotal3h)+vRegup(egu,blockpeaktotal3h)+vFlex(egu,blockpeaktotal3h)+vCont(egu,blockpeaktotal3h) - vGen(egu,blockpeaktotal3h-1) =l=
 863                    pRamprate(egu);
 864  rampUpblockpeaktotal3htech(tech,blockpeaktotal3h)$[ORD(blockpeaktotal3h)>1].. vGentech(tech,blockpeaktotal3h)+vReguptech(tech,blockpeaktotal3h)+vFlextech(tech,blockpeaktotal3h)+vConttech(tech,blockpeaktotal3h) - vGentech(tech,blockpeaktotal3h-1) =l=
 865                    pRampratetech(tech)*vN(tech);
 866  rampUpblockpeaknet4h(egu,blockpeaknet4h)$[ORD(blockpeaknet4h)>1].. vGen(egu,blockpeaknet4h)+vRegup(egu,blockpeaknet4h)+vFlex(egu,blockpeaknet4h)+vCont(egu,blockpeaknet4h) - vGen(egu,blockpeaknet4h-1) =l=
 867                    pRamprate(egu);
 868  rampUpblockpeaknet4htech(tech,blockpeaknet4h)$[ORD(blockpeaknet4h)>1].. vGentech(tech,blockpeaknet4h)+vReguptech(tech,blockpeaknet4h)+vFlextech(tech,blockpeaknet4h)+vConttech(tech,blockpeaknet4h) - vGentech(tech,blockpeaknet4h-1) =l=
 869                    pRampratetech(tech)*vN(tech);
 870  rampUpblockpeaknetramp5h(egu,blockpeaknetramp5h)$[ORD(blockpeaknetramp5h)>1].. vGen(egu,blockpeaknetramp5h)+vRegup(egu,blockpeaknetramp5h)+vFlex(egu,blockpeaknetramp5h)+vCont(egu,blockpeaknetramp5h) - vGen(egu,blockpeaknetramp5h-1) =l=
 871                    pRamprate(egu);
 872  rampUpblockpeaknetramp5htech(tech,blockpeaknetramp5h)$[ORD(blockpeaknetramp5h)>1].. vGentech(tech,blockpeaknetramp5h)+vReguptech(tech,blockpeaknetramp5h)+vFlextech(tech,blockpeaknetramp5h)+vConttech(tech,blockpeaknetramp5h) - vGentech(tech,blockpeak
      netramp5h-1) =l=
 873                    pRampratetech(tech)*vN(tech);
 874  rampUpblock6h(egu,block6h)$[ORD(block6h)>1].. vGen(egu,block6h)+vRegup(egu,block6h)+vFlex(egu,block6h)+vCont(egu,block6h) - vGen(egu,block6h-1) =l=
 875                    pRamprate(egu);
 876  rampUpblock6htech(tech,block6h)$[ORD(block6h)>1].. vGentech(tech,block6h)+vReguptech(tech,block6h)+vFlextech(tech,block6h)+vConttech(tech,block6h) - vGentech(tech,block6h-1) =l=
 877                    pRampratetech(tech)*vN(tech);
 878   
 879  Parameters
 880  *DIAGNOSTIC PARAMETERS
 881           pModelstat
 882           pSolvestat
 883                  ;
 884   
 885  Variables
 886  *Total cost variables
 887           vZannual                              obj func [thousandUSD per yr]
 888                  ;
 889   
 890  Equations
 891  *Cost equations
 892           objfunc                         objective function = sum investment and variable costs
 893           investmentcost                  calculate investment costs = fixed O&M + annualized capital costs
 894  *Generation and reserve constraints
 895           limitflexrestech(tech,h)        limit spin reserves by new plants by ramp rate
 896           limitcontrestech(tech,h)        limit cont reserves by new plants by ramp rate
 897           limitreguprestech(tech,h)       limit reg reserves by new plants by ramp rate
 898           limitallresuptech(tech,h)       limit total generation plus reserves of new plants to capacity
 899                   limitdacsgen(dacstech,h)
 900  *Renewable generation
 901           setrenewgentech(renewtech,h)    set electricity generation by new renewable generators
 902  *Storage constraints
 903                  limitStoTechGen(storagetech,h)
 904                  limitStoTechCharge(storagetech,h)
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 20
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 905                  stoTechSOCLimit(storagetech,h)
 906          limitstorageresuptech(storagetech,h)
 907  *CO2 emissions cap
 908           enforceco2emissionscap          restrict total co2 emissions to cap
 909                   ;
 910   
 911  ******************CALCULATE COSTS (OBJ FUNC)**********
 912  *Objective: minimize fixed + variable costs
 913  objfunc..                vZannual =e= vFixedcostannual + vVarcostannual;
 914  **************************************************
 915   
 916  ******************GENERATION AND RESERVE CONSTRAINTS******************
 917  *Limit spinning and regulation reserves each to ramp capability and time of reserve
 918  limitflexrestech(tech,h)$[pMaxflexoffertech(tech)>0].. vFlextech(tech,h) =l= pMaxflexoffertech(tech)*vN(tech);
 919  limitcontrestech(tech,h)$[pMaxcontoffertech(tech)>0].. vConttech(tech,h) =l= pMaxcontoffertech(tech)*vN(tech);
 920  limitreguprestech(tech,h)$[pMaxregupoffertech(tech)>0].. vReguptech(tech,h) =l= pMaxregupoffertech(tech)*vN(tech);
 921   
 922  *Limit up reserves plus generation to spare capacity for generating technologies
 923  limitallresuptech(gentechs,h).. vGentech(gentechs,h) + vFlextech(gentechs,h) + vConttech(gentechs,h) + vReguptech(gentechs,h) =l= pCapactech(gentechs) * vN(gentechs);
 924   
 925  *Limit DACS generation and reserves
 926  limitdacsgen(dacstech,h).. vGentech(dacstech,h) =g= pCapactech(dacstech)*vN(dacstech);
 927   
 928  *Limit new wind and solar generation
 929  setrenewgentech(renewtech,h)..   vGentech(renewtech,h) =l= pCapactech(renewtech)*pCf(renewtech,h)*vN(renewtech);
 930  ********************************************************************
 931   
 932  ******************STORAGE CONSTRAINTS******************
 933  *Bound generation (based on market participation) charging and SOC
 934  limitStoTechGen(storagetech,h) .. vGentech(storagetech,h) =l= pStoinenergymarket*vPowBuiltSto(storagetech);
 935  limitStoTechCharge(storagetech,h) .. vChargetech(storagetech,h) =l= vPowBuiltSto(storagetech)*pChargeDischargeCapRatio;
 936  stoTechSOCLimit(storagetech,h) .. vStateofchargetech(storagetech,h) =l= vEneBuiltSto(storagetech);
 937   
 938  *Limit up reserves to spare capacity plus charging
 939  limitstorageresuptech(storagetech,h) .. vReguptech(storagetech,h) + vFlextech(storagetech,h) + vConttech(storagetech,h) =l= (vPowBuiltSto(storagetech) - vGentech(storagetech,h)) + vChargetech(storagetech,h);
 940  *******************************************************
 941   
 942  ******************CO2 EMISSIONS CONSTRAINT******************
 943  *Meet emissions cap
 944  enforceco2emissionscap.. vCO2emsannual =l= pCO2emcap;
 945  ************************************************************
 946   
 947  Model ceWithED includes all equations /all/;
 948  solve ceWithED using lp minimizing vZannual;
 949   
 950  pModelstat = ceWithED.Modelstat;
 951  pSolvestat = ceWithED.solvestat;
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 21
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CEWithED.gms
     2       15 INCLUDE        1      15  .C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CESharedFeatures.gms
     3       18 INCLUDE        2       3  ..C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\EDAndUCSharedFeatures.gms
     4       95 GDXIN          3      77  ..C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gdb0.gdx
     5      296 GDXIN          2     104  .C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gdb0.gdx
     6      353 INCLUDE        2     161  ..C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CEBuildVariable.gms
     7      473 INCLUDE        1      16  .C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\StorageEDModule.gms
     8      485 INCLUDE        1      17  .C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\EDVarsAndConstraints.gms
     9      501 INCLUDE        1      18  .C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CETimeDependentConstraints.gms
    10      552 GDXIN          9      51  .C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.032 SECONDS      5 MB  30.2.0 r482c588 WEX-WEI
GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              09/22/22 10:39:54 Page 22
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


EXECUTION TIME       =      104.484 SECONDS    276 MB  30.2.0 r482c588 WEX-WEI


USER: An Pham, Single User License                   G210526|0002AO-GEN
      University of Michigan, School for Environment and SustainDC15829
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\CEWithED.gms
Output     C:\Users\atpha\Documents\Postdocs\Projects\NETs\Model\EI-CE\GAMS\_gams_py_gjo0.lst
